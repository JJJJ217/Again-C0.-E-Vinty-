# Azure DevOps CI/CD Pipeline
# Release 2 - Continuous Deployment Pipeline
# Supports dev and prod branches with automated testing and deployment

trigger:
  branches:
    include:
      - dev
      - prod
      - main

pr:
  branches:
    include:
      - dev
      - prod
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  phpVersion: '8.4'
  artifactName: 'againco-app'
  packagePath: '$(Build.ArtifactStagingDirectory)/app.zip'
  # Update these with your actual Azure resources
  azureServiceConnection: 'Again&Co.E-vinty'
  webAppNameDev: 'Again-CoE-Vinty'
  # webAppNameProd: 'againco-ecommerce-prod'

stages:
# =============================================================================
# STAGE 1: BUILD
# =============================================================================
- stage: Build
  displayName: 'üî® Build Application'
  jobs:
  - job: BuildJob
    displayName: 'Build and Package'
    steps:
    - script: |
        echo "==================================="
        echo "PHP Version Information"
        echo "==================================="
        php -v
        echo ""
        echo "==================================="
        echo "Composer Version"
        echo "==================================="
        composer --version
        echo ""
        echo "==================================="
        echo "Available PHP versions:"
        echo "==================================="
        ls -la /usr/bin/php* || echo "Checking PHP installations..."
      displayName: 'Display Environment Info'

    - script: |
        echo "Installing Composer dependencies..."
        composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
        echo "Dependencies installed successfully!"
      displayName: 'Install Composer Dependencies'

    - script: |
        echo "Creating production configuration files..."
        mkdir -p config
        # Create sample config for Azure deployment
        echo "<?php
        // Azure Production Configuration
        define('SITE_URL', getenv('SITE_URL') ?: 'https://$(webAppNameProd).azurewebsites.net');
        define('DB_HOST', getenv('DB_HOST') ?: 'localhost');
        define('DB_NAME', getenv('DB_NAME') ?: 'evinty_ecommerce');
        define('DB_USER', getenv('DB_USER') ?: 'root');
        define('DB_PASS', getenv('DB_PASS') ?: '');
        define('ENVIRONMENT', getenv('ENVIRONMENT') ?: 'production');
        ?>" > config/config.php
        echo "Configuration files created!"
      displayName: 'Create Configuration Files'

    - task: CopyFiles@2
      displayName: 'Stage Application Files'
      inputs:
        contents: |
          **/*
          !.git/**
          !.vscode/**
          !tests/**
          !.gitignore
          !azure-pipelines*.yml
          !phpunit.xml
          !*.md
          !web.config
          !nginx.conf
          !vendor/**/.git/**
        targetFolder: '$(Build.ArtifactStagingDirectory)/app'
        cleanTargetFolder: true

    - task: ArchiveFiles@2
      displayName: 'Create Deployment Package'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/app'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(packagePath)'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'
        publishLocation: 'Container'

    - script: |
        echo "==================================="
        echo "Build Stage Completed Successfully"
        echo "==================================="
        echo "Artifact: $(artifactName)"
        echo "Package: $(packagePath)"
        echo "Branch: $(Build.SourceBranch)"
      displayName: 'Build Summary'

# =============================================================================
# STAGE 2: TEST
# =============================================================================
- stage: Test
  displayName: 'üß™ Run Tests'
  dependsOn: Build
  jobs:
  - job: RunTests
    displayName: 'Execute PHPUnit Test Suites'
    steps:
    - script: |
        echo "Verifying PHP environment..."
        php -v
        composer --version
      displayName: 'Verify PHP Environment'

    - script: |
        echo "Installing test dependencies..."
        composer install --no-interaction --prefer-dist --optimize-autoloader
      displayName: 'Install Dependencies with Dev Packages'

    - script: |
        echo "Creating test configuration..."
        mkdir -p config
        echo "<?php
        define('TESTING', true);
        define('SITE_URL', 'http://localhost');
        define('DB_HOST', 'localhost');
        define('DB_NAME', 'test');
        define('DB_USER', 'test');
        define('DB_PASS', '');
        class Database {
            public function __construct() {}
            public function connect() { return \$this; }
            public function beginTransaction() {}
            public function commit() {}
            public function rollBack() {}
            public function fetchAll(\$sql, \$params = []) { return []; }
            public function fetch(\$sql, \$params = []) { return null; }
            public function query(\$sql, \$params = []) { return true; }
            public function lastInsertId() { return 1; }
            public function createDatabaseIfNotExists() {}
        }
        ?>" > config/database.php
      displayName: 'Setup Test Environment'

    # Individual test suites for each team member
    - script: |
        echo "==================================="
        echo "Running Michael Sutjiato's Tests"
        echo "==================================="
        ./vendor/bin/phpunit --testsuite "Michael_Sutjiato_Tests" \
          --log-junit "$(System.DefaultWorkingDirectory)/junit-michael.xml" \
          --testdox --colors=never
      displayName: 'üõí Michael - Cart & Shopping Tests'
      continueOnError: true

    - script: |
        echo "==================================="
        echo "Running Jiaming Huang's Tests"
        echo "==================================="
        ./vendor/bin/phpunit --testsuite "Jiaming_Huang_Tests" \
          --log-junit "$(System.DefaultWorkingDirectory)/junit-jiaming.xml" \
          --testdox --colors=never
      displayName: 'üîê Jiaming - Authentication Tests'
      continueOnError: true

    - script: |
        echo "==================================="
        echo "Running Charlotte Pham's Tests"
        echo "==================================="
        ./vendor/bin/phpunit --testsuite "Charlotte_Pham_Tests" \
          --log-junit "$(System.DefaultWorkingDirectory)/junit-charlotte.xml" \
          --testdox --colors=never
      displayName: 'üë§ Charlotte - Profile & Catalog Tests'
      continueOnError: true

    - script: |
        echo "==================================="
        echo "Running Thea Ngo's Tests"
        echo "==================================="
        ./vendor/bin/phpunit --testsuite "Thea_Ngo_Tests" \
          --log-junit "$(System.DefaultWorkingDirectory)/junit-thea.xml" \
          --testdox --colors=never
      displayName: 'üîç Thea - Product Catalog Tests'
      continueOnError: true

    - script: |
        echo "==================================="
        echo "Running Baljinnyam Gansukh's Tests"
        echo "==================================="
        ./vendor/bin/phpunit --testsuite "Baljinnyam_Gansukh_Tests" \
          --log-junit "$(System.DefaultWorkingDirectory)/junit-baljinnyam.xml" \
          --testdox --colors=never
      displayName: 'üì¶ Baljinnyam - Inventory Control Tests'
      continueOnError: true

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-*.xml'
        testRunTitle: 'Release 2 - All Team Member Tests'
        failTaskOnFailedTests: false
        publishRunAttachments: true
      condition: always()

    - script: |
        echo "==================================="
        echo "Test Stage Summary"
        echo "==================================="
        echo "All test suites executed"
        echo "Results published to Azure DevOps"
        echo "Check the Tests tab for detailed results"
      displayName: 'Test Summary'
      condition: always()

# =============================================================================
# STAGE 3: DEPLOY TO DEVELOPMENT
# =============================================================================
- stage: Deploy_Development
  displayName: 'üöÄ Deploy to Development'
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Dev Environment'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: '$(artifactName)'
              targetPath: '$(Pipeline.Workspace)/$(artifactName)'

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App (Dev)'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              appType: 'webAppLinux'
              appName: '$(webAppNameDev)'
              package: '$(Pipeline.Workspace)/$(artifactName)/app.zip'
              runtimeStack: 'PHP|8.4'

          - script: |
              echo "==================================="
              echo "‚úÖ Development Deployment Successful"
              echo "==================================="
              echo "Environment: Development"
              echo "URL: https://$(webAppNameDev).azurewebsites.net"
              echo "Branch: dev"
              echo "Commit: $(Build.SourceVersion)"
            displayName: 'Dev Deployment Summary'

# =============================================================================
# STAGE 4: DEPLOY TO PRODUCTION (CONTINUOUS DEPLOYMENT)
# =============================================================================
- stage: Deploy_Production
  displayName: 'üéØ Deploy to Production (CD)'
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/prod'))
  jobs:
  - deployment: DeployProd
    displayName: 'Deploy to Production Environment'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: '$(artifactName)'
              targetPath: '$(Pipeline.Workspace)/$(artifactName)'

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App (Production)'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              appType: 'webAppLinux'
              appName: '$(webAppNameProd)'
              package: '$(Pipeline.Workspace)/$(artifactName)/app.zip'
              runtimeStack: 'PHP|8.4'
              deploymentMethod: 'zipDeploy'

          - script: |
              echo "==================================="
              echo "‚úÖ PRODUCTION DEPLOYMENT SUCCESSFUL"
              echo "==================================="
              echo "üéØ Environment: PRODUCTION"
              echo "üåê URL: https://$(webAppNameProd).azurewebsites.net"
              echo "üîÄ Branch: prod"
              echo "üìù Commit: $(Build.SourceVersion)"
              echo "üë§ Author: $(Build.RequestedFor)"
              echo "‚è∞ Time: $(Build.BuildNumber)"
              echo "==================================="
              echo "üéâ Continuous Deployment Completed!"
            displayName: 'Production Deployment Summary'

# =============================================================================
# STAGE 5: SMOKE TEST (POST-DEPLOYMENT)
# =============================================================================
- stage: Smoke_Test
  displayName: 'üî• Smoke Test'
  dependsOn: 
    - Deploy_Development
    - Deploy_Production
  condition: or(succeeded('Deploy_Development'), succeeded('Deploy_Production'))
  jobs:
  - job: SmokeTest
    displayName: 'Run Post-Deployment Smoke Tests'
    steps:
    - script: |
        echo "Running smoke tests..."
        # Determine which environment to test
        if [ "$(Build.SourceBranch)" = "refs/heads/prod" ]; then
          URL="https://$(webAppNameProd).azurewebsites.net"
          ENV="Production"
        else
          URL="https://$(webAppNameDev).azurewebsites.net"
          ENV="Development"
        fi
        
        echo "Testing $ENV environment: $URL"
        
        # Test if site is reachable
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo "000")
        
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "302" ]; then
          echo "‚úÖ Smoke test passed! Site is responding (HTTP $HTTP_CODE)"
          exit 0
        else
          echo "‚ö†Ô∏è Warning: Site returned HTTP $HTTP_CODE"
          exit 0  # Don't fail the pipeline for smoke test
        fi
      displayName: 'Verify Deployment Health'
      continueOnError: true