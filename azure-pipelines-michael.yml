trigger:
- main

# Manual trigger for Michael's specific test units
pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  phpVersion: 8.4

jobs:
- job: Michael_Sutjiato_Individual_Tests
  displayName: "Michael Sutjiato - Individual Test Run"
  steps:
  - script: |
      echo "Verifying PHP environment for Michael Sutjiato's test suite"
      php -v
      composer --version
    displayName: 'Verify PHP Environment'

  - script: |
      echo "Installing dependencies..."
      composer install --no-interaction --prefer-dist --optimize-autoloader
    displayName: 'Install Composer Dependencies'

  - script: |
      echo "Setting up test environment..."
      # Create dummy config files to prevent init.php from failing
      mkdir -p config
      echo "<?php define('SITE_URL', 'http://localhost'); define('DB_HOST', 'localhost'); define('DB_NAME', 'test'); define('DB_USER', 'test'); define('DB_PASS', ''); ?>" > config/config.php
      echo "<?php class Database { public function __construct() {} public function connect() { return \$this; } public function beginTransaction() {} public function commit() {} public function rollBack() {} public function fetchAll(\$sql, \$params = []) { return []; } public function fetch(\$sql, \$params = []) { return null; } public function query(\$sql, \$params = []) { return true; } public function lastInsertId() { return 1; } public function createDatabaseIfNotExists() {} } ?>" > config/database.php
      
      # Verify test files exist
      echo "=== Checking test files ==="
      ls -la tests/
      echo ""
      echo "=== Verifying Michael's test files ==="
      test -f tests/Feature_Cart_ShoppingTest.php && echo "✓ Feature_Cart_ShoppingTest.php exists" || echo "✗ Feature_Cart_ShoppingTest.php missing"
      test -f tests/SmokeTest.php && echo "✓ SmokeTest.php exists" || echo "✗ SmokeTest.php missing"
      test -f tests/FunctionsTest.php && echo "✓ FunctionsTest.php exists" || echo "✗ FunctionsTest.php missing"
      echo ""
      echo "=== Checking phpunit.xml configuration ==="
      cat phpunit.xml | grep -A 10 "Michael_Sutjiato_Tests"
    displayName: 'Setup Test Environment'

  - script: |
      echo "=== Validating PHPUnit Configuration ==="
      # List available test suites
      echo "Available test suites:"
      ./vendor/bin/phpunit --list-suites
      echo ""
      # Test configuration validation
      echo "Validating configuration:"
      ./vendor/bin/phpunit --configuration phpunit.xml --list-tests --testsuite "Michael_Sutjiato_Tests" || echo "Warning: Could not list tests for Michael_Sutjiato_Tests"
    displayName: 'Validate PHPUnit Setup'
    continueOnError: true

  - script: |
      echo "=== Running Michael Sutjiato's Test Suite ==="
      echo "Test files included:"
      echo "- tests/Feature_Cart_ShoppingTest.php"
      echo "- tests/SmokeTest.php" 
      echo "- tests/FunctionsTest.php"
      echo ""
      
      # Check PHPUnit version first
      echo "PHPUnit version:"
      ./vendor/bin/phpunit --version
      echo ""
      
      # Run tests with valid options for PHPUnit 10.x
      echo "Executing test suite..."
      ./vendor/bin/phpunit \
        --testsuite "Michael_Sutjiato_Tests" \
        --log-junit "junit-michael-results.xml" \
        --coverage-text \
        --colors=never \
        --testdox
    displayName: "Execute Michael's Test Suite"
    continueOnError: true

  - script: |
      echo "=== Test Results Summary ==="
      if [ -f "junit-michael-results.xml" ]; then
        echo "✓ Test results file generated successfully"
        echo "File size: $(stat -f%z junit-michael-results.xml 2>/dev/null || stat -c%s junit-michael-results.xml) bytes"
        echo ""
        echo "=== XML Content Preview ==="
        head -20 junit-michael-results.xml
      else
        echo "✗ Test results file not found"
        echo "Listing current directory:"
        ls -la
      fi
    displayName: 'Verify Test Results'
    condition: always()

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'junit-michael-results.xml'
      testRunTitle: "Michael Sutjiato - Individual Test Results"
      failTaskOnFailedTests: false
      publishRunAttachments: true
    condition: succeededOrFailed()
    displayName: 'Publish Michael Test Results'

  - script: |
      echo "=== Final Status Report ==="
      echo "Pipeline completed for Michael Sutjiato"
      echo "Timestamp: $(date)"
      echo "Check the Test Results tab in Azure DevOps to view detailed results"
    displayName: 'Final Report'
    condition: always()