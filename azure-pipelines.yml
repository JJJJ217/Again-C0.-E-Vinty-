trigger:trigger:

- main- main



pool:pool:

  vmImage: 'ubuntu-latest'  vmImage: 'ubuntu-latest'



variables:variables:

  phpVersion: 8.1  phpVersion: 8.1



jobs:jobs:

- job: Michael_Sutjiato_Tests- job: Michael_Sutjiato_Tests

  displayName: "Michael Sutjiato's Tests"  displayName: "Michael Sutjiato's Tests"

  steps:  steps:

  - script: |  - script: |

      sudo update-alternatives --set php /usr/bin/php$(phpVersion)      sudo update-alternatives --set php /usr/bin/php$(phpVersion)

      sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)      sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)

      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)

      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)

      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)

      php -version      php -version

    displayName: 'Use PHP version $(phpVersion)'    displayName: 'Use PHP version $(phpVersion)'



  - script: composer install --no-interaction --prefer-dist  - script: composer install --no-interaction --prefer-dist

    displayName: 'Install Composer dependencies'    displayName: 'Install Composer dependencies'



  - script: |  - script: |

      # Create dummy config files to prevent init.php from failing      # Create dummy config files to prevent init.php from failing

      mkdir -p config      mkdir -p config

      echo "<?php define('SITE_URL', 'http://localhost'); ?>" > config/config.php      echo "<?php define('SITE_URL', 'http://localhost'); ?>" > config/config.php

      echo "<?php class Database { public function __construct() {} public function connect() { return \$this; } public function beginTransaction() {} public function rollBack() {} public function fetchAll(\$sql, \$params = []) { return []; } public function fetch(\$sql, \$params = []) { return null; } public function query(\$sql, \$params = []) {} public function lastInsertId() { return 1; } public function createDatabaseIfNotExists() {} } ?>" > config/database.php      echo "<?php class Database { public function __construct() {} public function connect() { return \$this; } public function beginTransaction() {} public function rollBack() {} public function fetchAll(\$sql, \$params = []) { return []; } public function fetch(\$sql, \$params = []) { return null; } public function query(\$sql, \$params = []) {} public function lastInsertId() { return 1; } public function createDatabaseIfNotExists() {} } ?>" > config/database.php

    displayName: 'Create dummy config files'    displayName: 'Create dummy config files'



  - script: |  - script: |

      echo "Running tests for Michael Sutjiato..."      echo "Running tests for Michael Sutjiato..."

      ./vendor/bin/phpunit --testsuite "Michael_Sutjiato_Tests" --log-junit "junit-michael.xml" --coverage-text --colors=never --testdox      ./vendor/bin/phpunit --testsuite "Michael_Sutjiato_Tests" --log-junit "junit-michael.xml" --coverage-text --colors=never

    displayName: "Run Michael Sutjiato's Tests"    displayName: "Run Michael Sutjiato's Tests"

    continueOnError: true    continueOnError: true



  - task: PublishTestResults@2  - task: PublishTestResults@2

    inputs:    inputs:

      testResultsFiles: 'junit-michael.xml'      testResultsFiles: 'junit-michael.xml'

      testRunTitle: "Michael Sutjiato's Test Results"      testRunTitle: "Michael Sutjiato's Test Results"

      failTaskOnFailedTests: false      failTaskOnFailedTests: false

    condition: succeededOrFailed()    condition: succeededOrFailed()



- job: Jiaming_Huang_Tests- job: Jiaming_Huang_Tests

  displayName: "Jiaming Huang's Tests"  displayName: "Jiaming Huang's Tests"

  steps:  steps:

  - script: |  - script: |

      sudo update-alternatives --set php /usr/bin/php$(phpVersion)      sudo update-alternatives --set php /usr/bin/php$(phpVersion)

      sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)      sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)

      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)

      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)

      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)

      php -version      php -version

    displayName: 'Use PHP version $(phpVersion)'    displayName: 'Use PHP version $(phpVersion)'



  - script: composer install --no-interaction --prefer-dist  - script: composer install --no-interaction --prefer-dist

    displayName: 'Install Composer dependencies'    displayName: 'Install Composer dependencies'



  - script: |  - script: |

      # Create dummy config files to prevent init.php from failing      # Create dummy config files to prevent init.php from failing

      mkdir -p config      mkdir -p config

      echo "<?php define('SITE_URL', 'http://localhost'); ?>" > config/config.php      echo "<?php define('SITE_URL', 'http://localhost'); ?>" > config/config.php

      echo "<?php class Database { public function __construct() {} public function connect() { return \$this; } public function beginTransaction() {} public function rollBack() {} public function fetchAll(\$sql, \$params = []) { return []; } public function fetch(\$sql, \$params = []) { return null; } public function query(\$sql, \$params = []) {} public function lastInsertId() { return 1; } public function createDatabaseIfNotExists() {} } ?>" > config/database.php      echo "<?php class Database { public function __construct() {} public function connect() { return \$this; } public function beginTransaction() {} public function rollBack() {} public function fetchAll(\$sql, \$params = []) { return []; } public function fetch(\$sql, \$params = []) { return null; } public function query(\$sql, \$params = []) {} public function lastInsertId() { return 1; } public function createDatabaseIfNotExists() {} } ?>" > config/database.php

    displayName: 'Create dummy config files'    displayName: 'Create dummy config files'



  - script: |  - script: |

      echo "Running tests for Jiaming Huang..."      echo "Running tests for Jiaming Huang..."

      ./vendor/bin/phpunit --testsuite "Jiaming_Huang_Tests" --log-junit "junit-jiaming.xml" --coverage-text --colors=never --testdox      ./vendor/bin/phpunit --testsuite "Jiaming_Huang_Tests" --log-junit "junit-jiaming.xml" --coverage-text --colors=never

    displayName: "Run Jiaming Huang's Tests"    displayName: "Run Jiaming Huang's Tests"

    continueOnError: true    continueOnError: true



  - task: PublishTestResults@2  - task: PublishTestResults@2

    inputs:    inputs:

      testResultsFiles: 'junit-jiaming.xml'      testResultsFiles: 'junit-jiaming.xml'

      testRunTitle: "Jiaming Huang's Test Results"      testRunTitle: "Jiaming Huang's Test Results"

      failTaskOnFailedTests: false      failTaskOnFailedTests: false

    condition: succeededOrFailed()    condition: succeededOrFailed()



- job: Charlotte_Pham_Tests- job: Charlotte_Pham_Tests

  displayName: "Charlotte Pham's Tests"  displayName: "Charlotte Pham's Tests"

  steps:  steps:

  - script: |  - script: |

      sudo update-alternatives --set php /usr/bin/php$(phpVersion)      sudo update-alternatives --set php /usr/bin/php$(phpVersion)

      sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)      sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)

      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)

      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)

      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)

      php -version      php -version

    displayName: 'Use PHP version $(phpVersion)'    displayName: 'Use PHP version $(phpVersion)'



  - script: composer install --no-interaction --prefer-dist  - script: composer install --no-interaction --prefer-dist

    displayName: 'Install Composer dependencies'    displayName: 'Install Composer dependencies'



  - script: |  - script: |

      # Create dummy config files to prevent init.php from failing      # Create dummy config files to prevent init.php from failing

      mkdir -p config      mkdir -p config

      echo "<?php define('SITE_URL', 'http://localhost'); ?>" > config/config.php      echo "<?php define('SITE_URL', 'http://localhost'); ?>" > config/config.php

      echo "<?php class Database { public function __construct() {} public function connect() { return \$this; } public function beginTransaction() {} public function rollBack() {} public function fetchAll(\$sql, \$params = []) { return []; } public function fetch(\$sql, \$params = []) { return null; } public function query(\$sql, \$params = []) {} public function lastInsertId() { return 1; } public function createDatabaseIfNotExists() {} } ?>" > config/database.php      echo "<?php class Database { public function __construct() {} public function connect() { return \$this; } public function beginTransaction() {} public function rollBack() {} public function fetchAll(\$sql, \$params = []) { return []; } public function fetch(\$sql, \$params = []) { return null; } public function query(\$sql, \$params = []) {} public function lastInsertId() { return 1; } public function createDatabaseIfNotExists() {} } ?>" > config/database.php

    displayName: 'Create dummy config files'    displayName: 'Create dummy config files'



  - script: |  - script: |

      echo "Running tests for Charlotte Pham..."      echo "Running tests for Charlotte Pham..."

      ./vendor/bin/phpunit --testsuite "Charlotte_Pham_Tests" --log-junit "junit-charlotte.xml" --coverage-text --colors=never --testdox      ./vendor/bin/phpunit --testsuite "Charlotte_Pham_Tests" --log-junit "junit-charlotte.xml" --coverage-text --colors=never

    displayName: "Run Charlotte Pham's Tests"    displayName: "Run Charlotte Pham's Tests"

    continueOnError: true    continueOnError: true



  - task: PublishTestResults@2  - task: PublishTestResults@2

    inputs:    inputs:

      testResultsFiles: 'junit-charlotte.xml'      testResultsFiles: 'junit-charlotte.xml'

      testRunTitle: "Charlotte Pham's Test Results"      testRunTitle: "Charlotte Pham's Test Results"

      failTaskOnFailedTests: false      failTaskOnFailedTests: false

    condition: succeededOrFailed()    condition: succeededOrFailed()



- job: Thea_Ngo_Tests- job: Thea_Ngo_Tests

  displayName: "Thea Ngo's Tests"  displayName: "Thea Ngo's Tests"

  steps:  steps:

  - script: |  - script: |

      sudo update-alternatives --set php /usr/bin/php$(phpVersion)      sudo update-alternatives --set php /usr/bin/php$(phpVersion)

      sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)      sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)

      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)

      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)

      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)

      php -version      php -version

    displayName: 'Use PHP version $(phpVersion)'    displayName: 'Use PHP version $(phpVersion)'



  - script: composer install --no-interaction --prefer-dist  - script: composer install --no-interaction --prefer-dist

    displayName: 'Install Composer dependencies'    displayName: 'Install Composer dependencies'



  - script: |  - script: |

      # Create dummy config files to prevent init.php from failing      # Create dummy config files to prevent init.php from failing

      mkdir -p config      mkdir -p config

      echo "<?php define('SITE_URL', 'http://localhost'); ?>" > config/config.php      echo "<?php define('SITE_URL', 'http://localhost'); ?>" > config/config.php

      echo "<?php class Database { public function __construct() {} public function connect() { return \$this; } public function beginTransaction() {} public function rollBack() {} public function fetchAll(\$sql, \$params = []) { return []; } public function fetch(\$sql, \$params = []) { return null; } public function query(\$sql, \$params = []) {} public function lastInsertId() { return 1; } public function createDatabaseIfNotExists() {} } ?>" > config/database.php      echo "<?php class Database { public function __construct() {} public function connect() { return \$this; } public function beginTransaction() {} public function rollBack() {} public function fetchAll(\$sql, \$params = []) { return []; } public function fetch(\$sql, \$params = []) { return null; } public function query(\$sql, \$params = []) {} public function lastInsertId() { return 1; } public function createDatabaseIfNotExists() {} } ?>" > config/database.php

    displayName: 'Create dummy config files'    displayName: 'Create dummy config files'



  - script: |  - script: |

      echo "Running tests for Thea Ngo..."      echo "Running tests for Thea Ngo..."

      ./vendor/bin/phpunit --testsuite "Thea_Ngo_Tests" --log-junit "junit-thea.xml" --coverage-text --colors=never --testdox      ./vendor/bin/phpunit --testsuite "Thea_Ngo_Tests" --log-junit "junit-thea.xml" --coverage-text --colors=never

    displayName: "Run Thea Ngo's Tests"    displayName: "Run Thea Ngo's Tests"

    continueOnError: true    continueOnError: true



  - task: PublishTestResults@2  - task: PublishTestResults@2

    inputs:    inputs:

      testResultsFiles: 'junit-thea.xml'      testResultsFiles: 'junit-thea.xml'

      testRunTitle: "Thea Ngo's Test Results"      testRunTitle: "Thea Ngo's Test Results"

      failTaskOnFailedTests: false      failTaskOnFailedTests: false

    condition: succeededOrFailed()    condition: succeededOrFailed()